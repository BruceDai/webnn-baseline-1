'use strict';

import {clamp} from '../src/clamp.js';
import {Tensor} from '../src/lib/tensor.js';
// import * as utils from './utils.js';


function getBaselineFloat32(inputShape, inputValue, options = {}) {
  // cast float64 inputs to float32 inputs
  const inputTensor = new Tensor(inputShape, new Float32Array(inputValue));
  const outputTensor = clamp(inputTensor, options);
  return outputTensor.data;
}

// Input data are random float64 numbers between [-10, 10) generated by invoking
//   getRandomArbitrary(-10, 10)
// refering to
//   https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random
function getRandomArbitrary(min, max) {
  return Math.random() * (max - min) + min;
}

// Step1: generate input data by random float64 numbers
const n = 24;
const genInputData = new Array(24);
for (let i = 0; i < n; i++) {
  genInputData[i] = getRandomArbitrary(-10, 10);
}
console.log(genInputData);

// sample of using generated input data
const inputData = [
  -3.4356449350874696, -6.530945988411405,  -8.175760663838268, 2.0879641317522726,
  -4.480150236948526,  -8.591504561715722,  5.071455429211573,  -6.618697702258771,
  4.224577823136105,   6.450272349350044,   -8.799923845835664, -3.3445965406946643,
  5.550524270215341,   1.2788677438688012,  9.333702625514768,  9.2261637863086,
  -7.302720212371034,  1.7865902395032585,  5.564981581526375,  3.145101011211482,
  -8.275078596251655,  -1.3557080837143296, 7.348269585030259,  -5.530012756488021,
];

const tests = {
  'default options': [
    // 1D
    [[24], 'expectedDefault'],
  ],
  'only specified minValue option': [
    // 1D
    [[24], 'expectedMin', {minValue: -5}],
    [[24], 'expectedMinZero', {minValue: 0}],
  ],
  'only specified maxValue option': [
    // 1D
    [[24], 'expectedMax', {maxValue: 7}],
    [[24], 'expectedMaxZero', {maxValue: 0}],
  ],
  'both specified minValue and maxValue options': [
    // 1D
    [[24], 'expectedMinMax', {minValue: -5, maxValue: 7}],
    [[24], 'expectedRelu6', {minValue: 0, maxValue: 6}],
  ],
};

// Step2: feeding above generated float64 input data to clamp function
(() => {
  for (const purpose in tests) {
    if (tests[purpose] !== undefined) {
      const subTests = tests[purpose];
      for (let i = 0; i < subTests.length; i++) {
        const result = getBaselineFloat32(subTests[i][0], inputData, subTests[i][2]);
        console.log(`${subTests[i][1]} =`);
        console.log(result);
      }
    }
  }
})();

// Step3: get output (float32) as float32 baseline
//
// On terminal run following commands to get output
// cd webnn-baseline-1
// node test\gen_clamp.js
//
// expectedDefault =
// Float32Array(24) [
//   -3.4356448650360107,  -6.530945777893066,
//    -8.175760269165039,  2.0879640579223633,
//     -4.48015022277832,  -8.591504096984863,
//     5.071455478668213,  -6.618697643280029,
//     4.224577903747559,   6.450272560119629,
//     -8.79992389678955, -3.3445966243743896,
//    5.5505242347717285,  1.2788677215576172,
//      9.33370304107666,   9.226163864135742,
//    -7.302720069885254,  1.7865902185440063,
//     5.564981460571289,  3.1451010704040527,
//    -8.275078773498535,  -1.355708122253418,
//     7.348269462585449,  -5.530012607574463
// ]
// expectedMin =
// Float32Array(24) [
//   -3.4356448650360107,                  -5,
//                    -5,  2.0879640579223633,
//     -4.48015022277832,                  -5,
//     5.071455478668213,                  -5,
//     4.224577903747559,   6.450272560119629,
//                    -5, -3.3445966243743896,
//    5.5505242347717285,  1.2788677215576172,
//      9.33370304107666,   9.226163864135742,
//                    -5,  1.7865902185440063,
//     5.564981460571289,  3.1451010704040527,
//                    -5,  -1.355708122253418,
//     7.348269462585449,                  -5
// ]
// expectedMinZero =
// Float32Array(24) [
//                    0,                  0,
//                    0, 2.0879640579223633,
//                    0,                  0,
//    5.071455478668213,                  0,
//    4.224577903747559,  6.450272560119629,
//                    0,                  0,
//   5.5505242347717285, 1.2788677215576172,
//     9.33370304107666,  9.226163864135742,
//                    0, 1.7865902185440063,
//    5.564981460571289, 3.1451010704040527,
//                    0,                  0,
//    7.348269462585449,                  0
// ]
// expectedMax =
// Float32Array(24) [
//   -3.4356448650360107,  -6.530945777893066,
//    -8.175760269165039,  2.0879640579223633,
//     -4.48015022277832,  -8.591504096984863,
//     5.071455478668213,  -6.618697643280029,
//     4.224577903747559,   6.450272560119629,
//     -8.79992389678955, -3.3445966243743896,
//    5.5505242347717285,  1.2788677215576172,
//                     7,                   7,
//    -7.302720069885254,  1.7865902185440063,
//     5.564981460571289,  3.1451010704040527,
//    -8.275078773498535,  -1.355708122253418,
//                     7,  -5.530012607574463
// ]
// expectedMaxZero =
// Float32Array(24) [
//   -3.4356448650360107,  -6.530945777893066,
//    -8.175760269165039,                   0,
//     -4.48015022277832,  -8.591504096984863,
//                     0,  -6.618697643280029,
//                     0,                   0,
//     -8.79992389678955, -3.3445966243743896,
//                     0,                   0,
//                     0,                   0,
//    -7.302720069885254,                   0,
//                     0,                   0,
//    -8.275078773498535,  -1.355708122253418,
//                     0,  -5.530012607574463
// ]
// expectedMinMax =
// Float32Array(24) [
//   -3.4356448650360107,                  -5,
//                    -5,  2.0879640579223633,
//     -4.48015022277832,                  -5,
//     5.071455478668213,                  -5,
//     4.224577903747559,   6.450272560119629,
//                    -5, -3.3445966243743896,
//    5.5505242347717285,  1.2788677215576172,
//                     7,                   7,
//                    -5,  1.7865902185440063,
//     5.564981460571289,  3.1451010704040527,
//                    -5,  -1.355708122253418,
//                     7,                  -5
// ]
// expectedRelu6 =
// Float32Array(24) [
//                    0,                  0,
//                    0, 2.0879640579223633,
//                    0,                  0,
//    5.071455478668213,                  0,
//    4.224577903747559,                  6,
//                    0,                  0,
//   5.5505242347717285, 1.2788677215576172,
//                    6,                  6,
//                    0, 1.7865902185440063,
//    5.564981460571289, 3.1451010704040527,
//                    0,                  0,
//                    6,                  0
// ]
