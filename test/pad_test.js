'use strict';

import {pad} from '../src/pad.js';
import {Tensor} from '../src/lib/tensor.js';
import * as utils from './utils.js';

describe('test pad', function() {
  function testPad(input, beginningPadding, endingPadding, options, expected) {
    const inputTensor = new Tensor(input.shape, input.values);
    const outputTensor = pad(inputTensor, beginningPadding, endingPadding, options);
    utils.checkShape(outputTensor, expected.shape);
    utils.checkValue(outputTensor, expected.values);
  }

  it('pad default', function() {
    testPad(
        {
          shape: [2, 3],
          values: [
            1, 2, 3,
            4, 5, 6,
          ],
        },
        [1, 2],
        [1, 2],
        {},
        {
          shape: [4, 7],
          values: [
            0., 0., 0., 0., 0., 0., 0.,
            0., 0., 1., 2., 3., 0., 0.,
            0., 0., 4., 5., 6., 0., 0.,
            0., 0., 0., 0., 0., 0., 0.,
          ],
        },
    );
  });
  it('pad value default constant mode', function() {
    testPad(
        {
          shape: [2, 3],
          values: [
            1, 2, 3,
            4, 5, 6,
          ],
        },
        [1, 2],
        [1, 2],
        {
          value: 9,
        },
        {
          shape: [4, 7],
          values: [
            9., 9., 9., 9., 9., 9., 9.,
            9., 9., 1., 2., 3., 9., 9.,
            9., 9., 4., 5., 6., 9., 9.,
            9., 9., 9., 9., 9., 9., 9.,
          ],
        },
    );
  });
  it('pad edge mode', function() {
    testPad(
        {
          shape: [2, 3],
          values: [1, 2, 3, 4, 5, 6],
        },
        [1, 2],
        [1, 2],
        {
          mode: 'edge',
        },
        {
          shape: [4, 7],
          values: [
            1., 1., 1., 2., 3., 3., 3.,
            1., 1., 1., 2., 3., 3., 3.,
            4., 4., 4., 5., 6., 6., 6.,
            4., 4., 4., 5., 6., 6., 6.,
          ],
        });
  });
  it('pad reflection mode 2D', function() {
    testPad(
        {
          shape: [2, 3],
          values: [1, 2, 3, 4, 5, 6],
        },
        [1, 2],
        [1, 2],
        {
          mode: 'reflection',
        },
        {
          shape: [4, 7],
          values: [
            6., 5., 4., 5., 6., 5., 4.,
            3., 2., 1., 2., 3., 2., 1.,
            6., 5., 4., 5., 6., 5., 4.,
            3., 2., 1., 2., 3., 2., 1.,
          ],
        });
  });

  it('pad reflection mode 4D', function() {
    testPad(
        {
          shape: [2, 2, 3, 3],
          values: [
            0, 1, 2,
            3, 4, 5,
            6, 7, 8,

            9, 10, 11,
            12, 13, 14,
            15, 16, 17,

            18, 19, 20,
            21, 22, 23,
            24, 25, 26,

            27, 28, 29,
            30, 31, 32,
            33, 34, 35,
          ],
        },
        [0, 0, 2, 2],
        [0, 0, 2, 2],
        {
          mode: 'reflection',
        },
        {
          shape: [2, 2, 7, 7],
          values: [
            8, 7, 6, 7, 8, 7, 6,
            5, 4, 3, 4, 5, 4, 3,
            2, 1, 0, 1, 2, 1, 0,
            5, 4, 3, 4, 5, 4, 3,
            8, 7, 6, 7, 8, 7, 6,
            5, 4, 3, 4, 5, 4, 3,
            2, 1, 0, 1, 2, 1, 0,

            17, 16, 15, 16, 17, 16, 15,
            14, 13, 12, 13, 14, 13, 12,
            11, 10, 9, 10, 11, 10, 9,
            14, 13, 12, 13, 14, 13, 12,
            17, 16, 15, 16, 17, 16, 15,
            14, 13, 12, 13, 14, 13, 12,
            11, 10, 9, 10, 11, 10, 9,

            26, 25, 24, 25, 26, 25, 24,
            23, 22, 21, 22, 23, 22, 21,
            20, 19, 18, 19, 20, 19, 18,
            23, 22, 21, 22, 23, 22, 21,
            26, 25, 24, 25, 26, 25, 24,
            23, 22, 21, 22, 23, 22, 21,
            20, 19, 18, 19, 20, 19, 18,

            35, 34, 33, 34, 35, 34, 33,
            32, 31, 30, 31, 32, 31, 30,
            29, 28, 27, 28, 29, 28, 27,
            32, 31, 30, 31, 32, 31, 30,
            35, 34, 33, 34, 35, 34, 33,
            32, 31, 30, 31, 32, 31, 30,
            29, 28, 27, 28, 29, 28, 27,
          ],
        });
  });

  it('pad symmetric mode 2D', function() {
    testPad(
        {
          shape: [2, 3],
          values: [1, 2, 3, 4, 5, 6],
        },
        [1, 2],
        [1, 2],
        {
          mode: 'symmetric',
        },
        {
          shape: [4, 7],
          values: [
            2., 1., 1., 2., 3., 3., 2.,
            2., 1., 1., 2., 3., 3., 2.,
            5., 4., 4., 5., 6., 6., 5.,
            5., 4., 4., 5., 6., 6., 5.,
          ],
        });
  });

  it('pad symmetric mode 4D', function() {
    testPad(
        {
          shape: [2, 2, 3, 3],
          values: [
            0, 1, 2,
            3, 4, 5,
            6, 7, 8,

            9, 10, 11,
            12, 13, 14,
            15, 16, 17,

            18, 19, 20,
            21, 22, 23,
            24, 25, 26,

            27, 28, 29,
            30, 31, 32,
            33, 34, 35,
          ],
        },
        [0, 0, 2, 2],
        [0, 0, 2, 2],
        {
          mode: 'symmetric',
        },
        {
          shape: [2, 2, 7, 7],
          values: [
            4, 3, 3, 4, 5, 5, 4,
            1, 0, 0, 1, 2, 2, 1,
            1, 0, 0, 1, 2, 2, 1,
            4, 3, 3, 4, 5, 5, 4,
            7, 6, 6, 7, 8, 8, 7,
            7, 6, 6, 7, 8, 8, 7,
            4, 3, 3, 4, 5, 5, 4,

            13, 12, 12, 13, 14, 14, 13,
            10, 9, 9, 10, 11, 11, 10,
            10, 9, 9, 10, 11, 11, 10,
            13, 12, 12, 13, 14, 14, 13,
            16, 15, 15, 16, 17, 17, 16,
            16, 15, 15, 16, 17, 17, 16,
            13, 12, 12, 13, 14, 14, 13,

            22, 21, 21, 22, 23, 23, 22,
            19, 18, 18, 19, 20, 20, 19,
            19, 18, 18, 19, 20, 20, 19,
            22, 21, 21, 22, 23, 23, 22,
            25, 24, 24, 25, 26, 26, 25,
            25, 24, 24, 25, 26, 26, 25,
            22, 21, 21, 22, 23, 23, 22,

            31, 30, 30, 31, 32, 32, 31,
            28, 27, 27, 28, 29, 29, 28,
            28, 27, 27, 28, 29, 29, 28,
            31, 30, 30, 31, 32, 32, 31,
            34, 33, 33, 34, 35, 35, 34,
            34, 33, 33, 34, 35, 35, 34,
            31, 30, 30, 31, 32, 32, 31,
          ],
        });
  });
});
